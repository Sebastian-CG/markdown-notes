{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","hooks/useLocalStorage.js","App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","useLocalStorage","key","initialValue","useState","item","localStorage","getItem","JSON","parse","storedValue","setStoredValue","value","setItem","stringify","App","editorText","setEditorText","markedText","setMarkedText","outerWidth","windowWidth","setWindowWidth","refUploadFileInput","useRef","addEventListener","useEffect","padding","Array","from","document","querySelectorAll","forEach","preElement","style","maxWidth","marked","display","type","ref","onChange","e","File","FileReader","FileList","Blob","files","target","reader","onload","file","result","readAsText","reload","alert","accept","className","theme","path","defaultLanguage","defaultValue","text","dangerouslySetInnerHTML","__html","onClick","current","click","fileName","prompt","archivo","url","URL","createObjectURL","a","createElement","href","download","trim","revokeObjectURL","ReactDOM","render","StrictMode","getElementById","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.14f65a34.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n  const setValue = (value) => {\n    setStoredValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import { useEffect, useRef, useState } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Editor from \"@monaco-editor/react\";\nimport { marked } from \"marked\";\nimport { FcFolder, FcDownload } from \"react-icons/fc\";\nimport \"github-markdown-css/github-markdown-dark.css\";\n\nexport default function App() {\n  const [editorText, setEditorText] = useLocalStorage(\"editorText\", \"\");\n  const [markedText, setMarkedText] = useState(\"\");\n  const [windowWidth, setWindowWidth] = useState(window.outerWidth);\n\n  const refUploadFileInput = useRef(null);\n\n  const openFilebrowser = () => {\n    refUploadFileInput.current.click();\n  };\n\n  const fileUpload = (e) => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      let files = e.target.files;\n      let reader = new FileReader();\n\n      reader.onload = function (file) {\n        setEditorText(file.target.result);\n        return true;\n      };\n\n      reader.readAsText(files[0]);\n      window.location.reload();\n    } else {\n      alert(\"The File APIs are not fully supported in this browser.\");\n    }\n  };\n\n  const downloadMarkdown = () => {\n    const fileName = prompt(\"Enter file name\") || \"markdown\";\n\n    const archivo = new Blob([editorText], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(archivo);\n    const a = document.createElement(\"a\");\n\n    a.href = url;\n    a.download = fileName.trim() + \".md\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  window.addEventListener(\"resize\", () => setWindowWidth(window.outerWidth));\n\n  useEffect(() => {\n    const padding = windowWidth >= 768 ? 90 : 30;\n    const allPreElements = Array.from(document.querySelectorAll(\"pre\"));\n\n    allPreElements.forEach((preElement) => {\n      preElement.style.maxWidth = `${(windowWidth - padding) / 2}px`;\n    });\n  }, [markedText, windowWidth]);\n\n  useEffect(() => {\n    setMarkedText(marked.parse(editorText));\n  }, [editorText]);\n\n  return (\n    <>\n      <input\n        style={{ display: \"none\" }}\n        type=\"file\"\n        ref={refUploadFileInput}\n        onChange={fileUpload}\n        accept=\".md,.mdown,.txt,.markdown\"\n      />\n\n      <div className=\"container\">\n        <Editor\n          theme=\"vs-dark\"\n          path=\"index.md\"\n          defaultLanguage=\"markdown\"\n          defaultValue={editorText}\n          onChange={(text) => setEditorText(text)}\n        />\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{ __html: markedText }}\n        />\n      </div>\n\n      <div className=\"buttons-container\">\n        <button className=\"download-btn\" onClick={openFilebrowser}>\n          <FcFolder />\n        </button>\n        <button className=\"download-btn\" onClick={downloadMarkdown}>\n          <FcDownload />\n        </button>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"./App.jsx\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}