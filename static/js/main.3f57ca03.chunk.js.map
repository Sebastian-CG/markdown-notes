{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","hooks/useLocalStorage.js","components/Button.jsx","components/Header.jsx","components/MonacoEditor.jsx","components/Output.jsx","App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","useLocalStorage","key","initialValue","useState","item","localStorage","getItem","JSON","parse","storedValue","setStoredValue","value","setItem","stringify","Button","children","onClick","className","defaultProps","Header","editorText","defaultGrid","darkEditorTheme","setEditorText","setDefaultGrid","setDarkEditorTheme","refUploadFileInput","useRef","style","display","type","ref","onChange","e","File","FileReader","FileList","Blob","files","target","reader","onload","file","result","readAsText","reload","alert","accept","current","click","titleElement","document","getElementsByTagName","innerText","archivo","url","URL","createObjectURL","a","createElement","href","download","trim","revokeObjectURL","MonacoEditor","theme","defaultLanguage","defaultValue","text","Output","markedText","outerWidth","windowWidth","setWindowWidth","addEventListener","useEffect","padding","Array","from","querySelectorAll","forEach","preElement","maxWidth","toggleButton","button","classList","toggle","add","appendChild","textToCopy","slice","length","clipboard","writeText","copyText","dangerouslySetInnerHTML","__html","App","setMarkedText","marked","ReactDOM","render","StrictMode","getElementById","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3f57ca03.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n  const setValue = (value) => {\n    setStoredValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","export default function Button({ children, onClick, className }) {\n  return (\n    <button className={className} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  className: \"btn\",\n};\n","import { Fragment, useRef } from \"react\";\n\n// Components\nimport Button from \"./Button\";\n\n// Icons\nimport {\n  BsGrid1X2Fill,\n  BsFillFolderFill,\n  BsFillCloudDownloadFill,\n  BsCircleHalf,\n} from \"react-icons/bs\";\n\nexport default function Header({\n  editorText,\n  defaultGrid,\n  darkEditorTheme,\n  setEditorText,\n  setDefaultGrid,\n  setDarkEditorTheme,\n}) {\n  const refUploadFileInput = useRef(null);\n\n  // Obtiene el contenido del archivo seleccionado\n  const fileUpload = (e) => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      let files = e.target.files;\n      let reader = new FileReader();\n\n      reader.onload = function (file) {\n        setEditorText(file.target.result);\n        return true;\n      };\n\n      reader.readAsText(files[0]);\n      window.location.reload();\n    } else {\n      alert(\"The File APIs are not fully supported in this browser.\");\n    }\n  };\n\n  // Cambia el estilo del de la gird\n  const changeGrid = () => {\n    setDefaultGrid(!defaultGrid);\n    window.location.reload();\n  };\n\n  // Cambia el tema del editor\n  const changeTheme = () => {\n    setDarkEditorTheme(!darkEditorTheme);\n  };\n\n  // Abre el explordador de archivos del sistema\n  const openFilebrowser = () => {\n    refUploadFileInput.current.click();\n  };\n\n  // Guarda el en la maquina local el contenido del editor en un archivo README.md o el nombre asignado.md\n  const downloadMarkdown = () => {\n    const titleElement = document.getElementsByTagName(\"h1\")[0].innerText;\n\n    const archivo = new Blob([editorText], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(archivo);\n    const a = document.createElement(\"a\");\n\n    a.href = url;\n    a.download = titleElement.trim() + \".md\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Fragment>\n      {/* \n        Este input file no es visible solo se esta tomando\n        la funcionalidad del input file\n      */}\n      <input\n        style={{ display: \"none\" }}\n        type=\"file\"\n        ref={refUploadFileInput}\n        onChange={fileUpload}\n        accept=\".md,.mdown,.txt,.markdown\"\n      />\n\n      <header>\n        <Button onClick={changeGrid}>\n          <BsGrid1X2Fill />\n          Change grid\n        </Button>\n\n        <Button onClick={changeTheme}>\n          <BsCircleHalf />\n          Change Editor Theme\n        </Button>\n\n        <Button onClick={openFilebrowser}>\n          <BsFillFolderFill />\n          Open File\n        </Button>\n\n        <Button onClick={downloadMarkdown}>\n          <BsFillCloudDownloadFill />\n          Download\n        </Button>\n      </header>\n    </Fragment>\n  );\n}\n","import Editor from \"@monaco-editor/react\";\n\nexport default function MonacoEditor({\n  darkEditorTheme,\n  editorText,\n  setEditorText,\n}) {\n  return (\n    <Editor\n      theme={darkEditorTheme ? \"vs-dark\" : \"vs-light\"}\n      defaultLanguage=\"markdown\"\n      defaultValue={editorText}\n      onChange={(text) => setEditorText(text)}\n    />\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function Output({ markedText }) {\n  const [windowWidth, setWindowWidth] = useState(window.outerWidth);\n\n  window.addEventListener(\"resize\", () => setWindowWidth(window.outerWidth));\n\n  /**\n   * Calcula el acho que deve tener los bloques de codigo.\n   * Esto se hace par que el bloque de codigo tenga un scroll horizontal\n   * cuando su contendio lo supere.\n   */\n  useEffect(() => {\n    const padding = windowWidth >= 768 ? 90 : 30;\n    const allPreElements = Array.from(document.querySelectorAll(\"pre\"));\n\n    allPreElements.forEach((preElement) => {\n      preElement.style.maxWidth = `${(windowWidth - padding) / 2}px`;\n    });\n  }, [markedText, windowWidth]);\n\n  // A cada elemento <pre> se le agrega un boton para copiar el contenido\n  useEffect(() => {\n    const allPreElements = Array.from(document.querySelectorAll(\"pre\"));\n\n    allPreElements.forEach((preElement) => {\n      const toggleButton = () => button.classList.toggle(\"visible-copy-button\");\n\n      // Copy el texto que se le pase por parametro en el clipboard eliminando los ultimos 6 caracteres\n      const copyText = (text) => {\n        const textToCopy = text.slice(0, text.length - 6);\n        navigator.clipboard.writeText(textToCopy);\n      };\n\n      const button = document.createElement(\"button\");\n      button.classList.add(\"copy-button\");\n      button.innerText = \"Copy\";\n      preElement.appendChild(button);\n\n      preElement.addEventListener(\"mouseenter\", toggleButton);\n      preElement.addEventListener(\"mouseleave\", toggleButton);\n      button.addEventListener(\"click\", () => copyText(preElement.innerText));\n    });\n  }, [markedText]);\n\n  return (\n    <section\n      className=\"markdown-body\"\n      dangerouslySetInnerHTML={{ __html: markedText }}\n    />\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { marked } from \"marked\";\n\n// Components\nimport Header from \"./components/Header\";\nimport MonacoEditor from \"./components/MonacoEditor\";\nimport Output from \"./components/Output\";\n\n// Styles\nimport \"github-markdown-css/github-markdown-light.css\";\n\nexport default function App() {\n  const [editorText, setEditorText] = useLocalStorage(\"editorText\", \"\");\n  const [markedText, setMarkedText] = useState(\"\");\n  const [darkEditorTheme, setDarkEditorTheme] = useLocalStorage(\n    \"darkEditorTheme\",\n    true\n  );\n  const [defaultGrid, setDefaultGrid] = useLocalStorage(\"defaultGrid\", true);\n\n  // Actualiza el estado setMarkedText con el contenido del editor cada vez que cambia su contenido\n  useEffect(() => setMarkedText(marked.parse(editorText)), [editorText]);\n\n  return (\n    <div className=\"container\">\n      <Header\n        editorText={editorText}\n        defaultGrid={defaultGrid}\n        darkEditorTheme={darkEditorTheme}\n        setEditorText={setEditorText}\n        setDefaultGrid={setDefaultGrid}\n        setDarkEditorTheme={setDarkEditorTheme}\n      />\n\n      <main className={defaultGrid ? \"horizontal-grid\" : \"vertical-grid\"}>\n        <MonacoEditor\n          darkEditorTheme={darkEditorTheme}\n          editorText={editorText}\n          setEditorText={setEditorText}\n        />\n        <Output markedText={markedText} />\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"./App.jsx\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}